/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CodeSnippetsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/snippet-manager.ts
var SnippetManager = class {
  constructor(app, settings) {
    this.snippets = /* @__PURE__ */ new Map();
    this.app = app;
    this.vault = app.vault;
    this.settings = settings;
    this.dataFilePath = "data.json";
  }
  /**
   * 初始化片段管理器，加载默认片段
   */
  async initialize() {
    await this.loadDefaultSnippets();
    await this.loadCustomSnippets();
  }
  /**
   * 设置插件实例，用于数据保存
   */
  setPlugin(plugin) {
    this.plugin = plugin;
  }
  /**
   * 加载默认代码片段
   */
  async loadDefaultSnippets() {
    const defaultSnippets = [
      {
        id: "js-function",
        name: "JavaScript Function",
        prefix: "func",
        body: [
          "function ${1:functionName}(${2:parameters}) {",
          "	${3:// TODO: implement}",
          "	return ${4:undefined};",
          "}"
        ],
        description: "Create a JavaScript function",
        scope: ["javascript", "typescript"],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        usageCount: 0
      },
      {
        id: "py-class",
        name: "Python Class",
        prefix: "class",
        body: [
          "class ${1:ClassName}:",
          '	"""${2:Class description}"""',
          "	",
          "	def __init__(self${3:, parameters}):",
          '		"""${4:Constructor description}"""',
          "		${5:pass}"
        ],
        description: "Create a Python class",
        scope: ["python"],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        usageCount: 0
      },
      {
        id: "md-codeblock",
        name: "Markdown Code Block",
        prefix: "code",
        body: [
          "```${1:language}",
          "${2:// your code here}",
          "```"
        ],
        description: "Create a markdown code block",
        scope: ["markdown"],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        usageCount: 0
      },
      {
        id: "md-table",
        name: "Markdown Table",
        prefix: "table",
        body: [
          "| ${1:Header 1} | ${2:Header 2} | ${3:Header 3} |",
          "|--------------|--------------|--------------|",
          "| ${4:Cell 1}   | ${5:Cell 2}   | ${6:Cell 3}   |",
          "| ${7:Cell 4}   | ${8:Cell 5}   | ${9:Cell 6}   |"
        ],
        description: "Create a markdown table",
        scope: ["markdown"],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        usageCount: 0
      },
      {
        id: "obsidian-note-template",
        name: "Obsidian Note Template",
        prefix: "note",
        body: [
          "# ${1:Note Title}",
          "",
          "**Created:** {{date}}",
          "**Tags:** #${2:tag}",
          "",
          "## Summary",
          "${3:Brief summary of the note}",
          "",
          "## Content",
          "${4:Main content goes here}",
          "",
          "## References",
          "- ${5:Reference links or notes}"
        ],
        description: "Create an Obsidian note template",
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        usageCount: 0
      }
    ];
    defaultSnippets.forEach((snippet) => {
      this.snippets.set(snippet.id, snippet);
    });
  }
  /**
   * 从插件数据文件加载片段
   */
  async loadCustomSnippets() {
    try {
      if (this.plugin) {
        const data = await this.plugin.loadData();
        if (data && data.customSnippets) {
          const customSnippets = data.customSnippets;
          customSnippets.forEach((snippet) => {
            this.snippets.set(snippet.id, snippet);
          });
          console.log(`\u2705 \u5DF2\u4ECE\u63D2\u4EF6\u6570\u636E\u52A0\u8F7D ${customSnippets.length} \u4E2A\u81EA\u5B9A\u4E49\u7247\u6BB5`);
        } else {
          console.log("\u{1F4DD} \u672A\u627E\u5230\u81EA\u5B9A\u4E49\u7247\u6BB5\u6570\u636E\uFF0C\u5C06\u53EA\u4F7F\u7528\u9ED8\u8BA4\u7247\u6BB5");
        }
      } else {
        console.warn("\u26A0\uFE0F \u63D2\u4EF6\u5B9E\u4F8B\u672A\u8BBE\u7F6E\uFF0C\u65E0\u6CD5\u52A0\u8F7D\u81EA\u5B9A\u4E49\u7247\u6BB5");
      }
    } catch (error) {
      console.log("\u274C \u52A0\u8F7D\u81EA\u5B9A\u4E49\u7247\u6BB5\u5931\u8D25\uFF0C\u5C06\u4F7F\u7528\u9ED8\u8BA4\u7247\u6BB5:", error);
    }
  }
  /**
   * 保存自定义片段到插件数据文件
   */
  async saveCustomSnippets() {
    try {
      if (this.plugin) {
        const customSnippets = Array.from(this.snippets.values()).filter(
          (snippet) => !this.isDefaultSnippet(snippet.id)
        );
        const data = await this.plugin.loadData() || {};
        data.customSnippets = customSnippets;
        await this.plugin.saveData(data);
        console.log(`\u2705 \u5DF2\u4FDD\u5B58 ${customSnippets.length} \u4E2A\u81EA\u5B9A\u4E49\u7247\u6BB5\u5230\u63D2\u4EF6\u6570\u636E\u6587\u4EF6`);
      } else {
        console.warn("\u26A0\uFE0F \u63D2\u4EF6\u5B9E\u4F8B\u672A\u8BBE\u7F6E\uFF0C\u65E0\u6CD5\u4FDD\u5B58\u81EA\u5B9A\u4E49\u7247\u6BB5");
      }
    } catch (error) {
      console.error("\u274C \u4FDD\u5B58\u81EA\u5B9A\u4E49\u7247\u6BB5\u5931\u8D25:", error);
    }
  }
  /**
   * 检查是否为默认片段
   */
  isDefaultSnippet(id) {
    const defaultIds = [
      "js-function",
      "js-class",
      "js-arrow",
      "js-async",
      "py-class",
      "py-function",
      "py-if",
      "py-for",
      "md-code",
      "md-table",
      "md-link",
      "md-note"
    ];
    return defaultIds.includes(id);
  }
  /**
   * 添加新片段
   */
  addSnippet(snippet) {
    const id = this.generateId();
    const now = new Date().toISOString();
    const newSnippet = {
      ...snippet,
      id,
      createdAt: now,
      updatedAt: now,
      usageCount: 0
    };
    this.snippets.set(id, newSnippet);
    this.saveCustomSnippets();
    return id;
  }
  /**
   * 更新片段
   */
  updateSnippet(id, updates) {
    const snippet = this.snippets.get(id);
    if (!snippet)
      return false;
    const updatedSnippet = {
      ...snippet,
      ...updates,
      id: snippet.id,
      // 保持原有ID
      createdAt: snippet.createdAt,
      // 保持创建时间
      updatedAt: new Date().toISOString()
    };
    this.snippets.set(id, updatedSnippet);
    this.saveCustomSnippets();
    return true;
  }
  /**
   * 删除片段
   */
  deleteSnippet(id) {
    const deleted = this.snippets.delete(id);
    if (deleted) {
      this.saveCustomSnippets();
    }
    return deleted;
  }
  /**
   * 获取片段
   */
  getSnippet(id) {
    return this.snippets.get(id);
  }
  /**
   * 获取所有片段
   */
  getAllSnippets() {
    return Array.from(this.snippets.values());
  }
  /**
   * 根据前缀搜索片段
   */
  searchSnippets(prefix, scope) {
    const results = [];
    for (const snippet of this.snippets.values()) {
      if (scope && snippet.scope) {
        const scopes = Array.isArray(snippet.scope) ? snippet.scope : [snippet.scope];
        if (!scopes.includes(scope))
          continue;
      }
      const prefixes = Array.isArray(snippet.prefix) ? snippet.prefix : [snippet.prefix];
      const matches = prefixes.some((p) => {
        if (this.settings.fuzzyMatch) {
          return this.fuzzyMatch(prefix.toLowerCase(), p.toLowerCase());
        } else {
          return p.toLowerCase().startsWith(prefix.toLowerCase());
        }
      });
      if (matches) {
        results.push(snippet);
      }
    }
    return results.sort((a, b) => {
      const aUsage = a.usageCount || 0;
      const bUsage = b.usageCount || 0;
      return bUsage - aUsage;
    }).slice(0, this.settings.maxSuggestions);
  }
  /**
   * 增加片段使用次数
   */
  incrementUsage(id) {
    const snippet = this.snippets.get(id);
    if (snippet) {
      snippet.usageCount = (snippet.usageCount || 0) + 1;
      snippet.updatedAt = new Date().toISOString();
      this.saveCustomSnippets();
    }
  }
  /**
   * 模糊匹配算法
   */
  fuzzyMatch(pattern, text) {
    let patternIdx = 0;
    let textIdx = 0;
    while (patternIdx < pattern.length && textIdx < text.length) {
      if (pattern[patternIdx] === text[textIdx]) {
        patternIdx++;
      }
      textIdx++;
    }
    return patternIdx === pattern.length;
  }
  /**
   * 生成唯一ID
   */
  generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }
};

// src/snippet-expander.ts
var SnippetExpander = class {
  /**
   * 将片段展开为可插入的文本
   */
  static expandSnippet(snippet) {
    const body = Array.isArray(snippet.body) ? snippet.body.join("\n") : snippet.body;
    const trigger = Array.isArray(snippet.prefix) ? snippet.prefix[0] : snippet.prefix;
    const { expandedText, cursorPositions, variables } = this.parseSnippetBody(body);
    return {
      trigger,
      expandedText,
      cursorPositions,
      variables
    };
  }
  /**
   * 解析片段内容，提取变量和光标位置
   */
  static parseSnippetBody(body) {
    const variables = /* @__PURE__ */ new Map();
    const cursorPositions = [];
    let expandedText = body;
    let offset = 0;
    const placeholderRegex = /\$\{(\d+)(?::([^}]*))?\}/g;
    let match;
    const replacements = [];
    while ((match = placeholderRegex.exec(body)) !== null) {
      const fullMatch = match[0];
      const tabIndex = parseInt(match[1]);
      const defaultValue = match[2] || "";
      replacements.push({
        start: match.index,
        end: match.index + fullMatch.length,
        replacement: defaultValue,
        tabIndex
      });
      if (!variables.has(tabIndex.toString())) {
        variables.set(tabIndex.toString(), {
          name: `var${tabIndex}`,
          defaultValue,
          description: `Variable ${tabIndex}`
        });
      }
    }
    replacements.sort((a, b) => b.start - a.start);
    for (const replacement of replacements) {
      const before = expandedText.substring(0, replacement.start);
      const after = expandedText.substring(replacement.end);
      const cursorPos = before.length;
      cursorPositions.push(cursorPos);
      expandedText = before + replacement.replacement + after;
    }
    expandedText = this.processSpecialVariables(expandedText);
    cursorPositions.sort((a, b) => a - b);
    return {
      expandedText,
      cursorPositions,
      variables: Array.from(variables.values())
    };
  }
  /**
   * 处理特殊变量（如日期、时间等）
   */
  static processSpecialVariables(text) {
    const now = new Date();
    const specialVars = {
      "{{date}}": now.toISOString().split("T")[0],
      "{{time}}": now.toTimeString().split(" ")[0],
      "{{datetime}}": now.toISOString(),
      "{{year}}": now.getFullYear().toString(),
      "{{month}}": (now.getMonth() + 1).toString().padStart(2, "0"),
      "{{day}}": now.getDate().toString().padStart(2, "0"),
      "{{timestamp}}": now.getTime().toString()
    };
    let result = text;
    for (const [variable, value] of Object.entries(specialVars)) {
      result = result.replace(new RegExp(variable.replace(/[{}]/g, "\\$&"), "g"), value);
    }
    return result;
  }
  /**
   * 应用变量值到展开的文本
   */
  static applyVariables(expansion, variableValues) {
    let result = expansion.expandedText;
    for (const [varName, value] of variableValues.entries()) {
      const regex = new RegExp(`\\$\\{${varName}(?::[^}]*)?\\}`, "g");
      result = result.replace(regex, value);
    }
    return result;
  }
  /**
   * 获取下一个光标位置
   */
  static getNextCursorPosition(expansion, currentPosition) {
    const nextPositions = expansion.cursorPositions.filter((pos) => pos > currentPosition);
    return nextPositions.length > 0 ? nextPositions[0] : null;
  }
  /**
   * 获取上一个光标位置
   */
  static getPreviousCursorPosition(expansion, currentPosition) {
    const prevPositions = expansion.cursorPositions.filter((pos) => pos < currentPosition);
    return prevPositions.length > 0 ? prevPositions[prevPositions.length - 1] : null;
  }
};

// src/settings-tab.ts
var import_obsidian = require("obsidian");
var SettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "\u4EE3\u7801\u7247\u6BB5\u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u542F\u7528\u4EE3\u7801\u7247\u6BB5").setDesc("\u5F00\u542F\u6216\u5173\u95ED\u4EE3\u7801\u7247\u6BB5\u529F\u80FD").addToggle((toggle) => toggle.setValue(this.plugin.settings.enabled).onChange(async (value) => {
      this.plugin.settings.enabled = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u89E6\u53D1\u6A21\u5F0F").setDesc("\u9009\u62E9\u4EE3\u7801\u7247\u6BB5\u7684\u89E6\u53D1\u65B9\u5F0F").addDropdown((dropdown) => dropdown.addOption("auto", "\u81EA\u52A8\u89E6\u53D1\uFF08\u63A8\u8350\uFF09- \u8F93\u5165\u65F6\u81EA\u52A8\u663E\u793A\u5EFA\u8BAE").addOption("manual", "\u624B\u52A8\u89E6\u53D1 - Ctrl/Cmd+Space \u89E6\u53D1").addOption("tab", "Tab\u952E\u89E6\u53D1\uFF08\u8C28\u614E\u4F7F\u7528\uFF09- \u53EF\u80FD\u4E0EObsidian\u529F\u80FD\u51B2\u7A81").setValue(this.plugin.settings.triggerMode).onChange(async (value) => {
      this.plugin.settings.triggerMode = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u663E\u793A\u7247\u6BB5\u9884\u89C8").setDesc("\u5728\u5EFA\u8BAE\u5217\u8868\u4E2D\u663E\u793A\u4EE3\u7801\u7247\u6BB5\u9884\u89C8").addToggle((toggle) => toggle.setValue(this.plugin.settings.showPreview).onChange(async (value) => {
      this.plugin.settings.showPreview = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u542F\u7528\u6A21\u7CCA\u5339\u914D").setDesc("\u5141\u8BB8\u4E0D\u8FDE\u7EED\u5B57\u7B26\u5339\u914D\u4EE3\u7801\u7247\u6BB5\u524D\u7F00").addToggle((toggle) => toggle.setValue(this.plugin.settings.fuzzyMatch).onChange(async (value) => {
      this.plugin.settings.fuzzyMatch = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u6700\u5927\u5EFA\u8BAE\u6570\u91CF").setDesc("\u8BBE\u7F6E\u540C\u65F6\u663E\u793A\u7684\u4EE3\u7801\u7247\u6BB5\u5EFA\u8BAE\u6570\u91CF").addSlider((slider) => slider.setLimits(1, 20, 1).setValue(this.plugin.settings.maxSuggestions).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.maxSuggestions = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u81EA\u5B9A\u4E49\u7247\u6BB5\u8DEF\u5F84").setDesc("\u8BBE\u7F6E\u81EA\u5B9A\u4E49\u4EE3\u7801\u7247\u6BB5\u6587\u4EF6\u7684\u5B58\u50A8\u8DEF\u5F84").addText((text) => text.setPlaceholder(".obsidian/snippets.json").setValue(this.plugin.settings.customSnippetsPath || "").onChange(async (value) => {
      this.plugin.settings.customSnippetsPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u542F\u7528\u4F7F\u7528\u7EDF\u8BA1").setDesc("\u8BB0\u5F55\u4EE3\u7801\u7247\u6BB5\u7684\u4F7F\u7528\u6B21\u6570\uFF0C\u7528\u4E8E\u6392\u5E8F\u5EFA\u8BAE").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableStats).onChange(async (value) => {
      this.plugin.settings.enableStats = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "\u7247\u6BB5\u7BA1\u7406" });
    new import_obsidian.Setting(containerEl).setName("\u7BA1\u7406\u4EE3\u7801\u7247\u6BB5").setDesc("\u6253\u5F00\u4EE3\u7801\u7247\u6BB5\u7BA1\u7406\u754C\u9762").addButton((button) => button.setButtonText("\u6253\u5F00\u7BA1\u7406\u5668").setCta().onClick(() => {
      this.plugin.openSnippetManager();
    }));
    new import_obsidian.Setting(containerEl).setName("\u5BFC\u51FA\u7247\u6BB5").setDesc("\u5C06\u5F53\u524D\u6240\u6709\u4EE3\u7801\u7247\u6BB5\u5BFC\u51FA\u5230\u6587\u4EF6").addButton((button) => button.setButtonText("\u5BFC\u51FA").onClick(async () => {
      await this.plugin.exportSnippets();
    }));
    new import_obsidian.Setting(containerEl).setName("\u5BFC\u5165\u7247\u6BB5").setDesc("\u4ECE\u6587\u4EF6\u5BFC\u5165\u4EE3\u7801\u7247\u6BB5").addButton((button) => button.setButtonText("\u5BFC\u5165").onClick(() => {
      this.plugin.importSnippets();
    }));
    containerEl.createEl("h3", { text: "\u91CD\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u91CD\u7F6E\u6240\u6709\u8BBE\u7F6E").setDesc("\u5C06\u6240\u6709\u8BBE\u7F6E\u6062\u590D\u4E3A\u9ED8\u8BA4\u503C").addButton((button) => button.setButtonText("\u91CD\u7F6E").setWarning().onClick(async () => {
      await this.plugin.resetSettings();
      this.display();
    }));
  }
};

// src/snippet-manager-modal.ts
var import_obsidian2 = require("obsidian");
var SnippetManagerModal = class extends import_obsidian2.Modal {
  constructor(app, snippetManager) {
    super(app);
    this.snippets = [];
    this.selectedSnippet = null;
    this.snippetManager = snippetManager;
  }
  onOpen() {
    this.loadSnippets();
    this.display();
    this.modalEl.style.width = "90vw";
    this.modalEl.style.height = "85vh";
    this.modalEl.style.maxWidth = "1400px";
    this.modalEl.style.maxHeight = "900px";
    this.modalEl.style.minWidth = "800px";
    this.modalEl.style.minHeight = "600px";
    this.modalEl.style.paddingTop = "1.5rem";
    this.modalEl.style.overflowX = "hidden";
    this.scope.register(["Ctrl"], "n", () => {
      this.createNewSnippet();
      return false;
    });
    this.scope.register(["Ctrl"], "s", () => {
      if (this.selectedSnippet) {
        this.saveSnippet();
      }
      return false;
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  loadSnippets() {
    this.snippets = this.snippetManager.getAllSnippets();
  }
  display() {
    const { contentEl } = this;
    contentEl.empty();
    const scrollableContent = contentEl.createDiv({ cls: "snippet-manager-scrollable" });
    const container = scrollableContent.createDiv({ cls: "snippet-manager-container" });
    const leftPanel = container.createDiv({ cls: "snippet-list-panel" });
    const rightPanel = container.createDiv({ cls: "snippet-edit-panel" });
    this.createSnippetList(leftPanel);
    this.createSnippetEditor(rightPanel);
    this.addStyles();
  }
  createSnippetList(container) {
    const header = container.createDiv({ cls: "panel-header" });
    header.createEl("h3", { text: "\u7247\u6BB5\u5217\u8868" });
    const addButton = header.createEl("button", { text: "\u65B0\u5EFA\u7247\u6BB5", cls: "mod-cta" });
    addButton.onclick = () => this.createNewSnippet();
    const statsContainer = container.createDiv({ cls: "stats-container" });
    const totalCount = this.snippets.length;
    statsContainer.createEl("span", {
      text: `\u5171 ${totalCount} \u4E2A\u7247\u6BB5`,
      cls: "stats-text"
    });
    const searchContainer = container.createDiv({ cls: "search-container" });
    const searchInput = searchContainer.createEl("input", {
      type: "text",
      placeholder: "\u641C\u7D22\u7247\u6BB5...",
      cls: "search-input"
    });
    searchInput.oninput = (e) => {
      const query = e.target.value;
      this.filterSnippets(query);
    };
    const listContainer = container.createDiv({ cls: "snippet-list" });
    this.renderSnippetList(listContainer);
  }
  renderSnippetList(container) {
    container.empty();
    this.snippets.forEach((snippet) => {
      var _a;
      const item = container.createDiv({ cls: "snippet-item" });
      if (((_a = this.selectedSnippet) == null ? void 0 : _a.id) === snippet.id) {
        item.addClass("selected");
      }
      const title = item.createDiv({ cls: "snippet-title" });
      title.textContent = snippet.name;
      const prefix = item.createDiv({ cls: "snippet-prefix" });
      prefix.textContent = Array.isArray(snippet.prefix) ? snippet.prefix.join(", ") : snippet.prefix;
      const description = item.createDiv({ cls: "snippet-description" });
      description.textContent = snippet.description || "";
      item.onclick = () => {
        this.selectedSnippet = snippet;
        this.display();
      };
    });
  }
  createSnippetEditor(container) {
    const header = container.createDiv({ cls: "panel-header" });
    header.createEl("h3", { text: "\u7F16\u8F91\u7247\u6BB5" });
    const shortcutsDiv = header.createDiv({ cls: "shortcuts-hint" });
    shortcutsDiv.createEl("span", {
      text: "Ctrl+N: \u65B0\u5EFA | Ctrl+S: \u4FDD\u5B58",
      cls: "shortcuts-text"
    });
    if (!this.selectedSnippet) {
      container.createDiv({ text: "\u8BF7\u9009\u62E9\u4E00\u4E2A\u7247\u6BB5\u8FDB\u884C\u7F16\u8F91", cls: "empty-message" });
      return;
    }
    const form = container.createDiv({ cls: "snippet-form" });
    new import_obsidian2.Setting(form).setName("\u7247\u6BB5\u540D\u79F0").setDesc("\u7247\u6BB5\u7684\u663E\u793A\u540D\u79F0").addText((text) => text.setValue(this.selectedSnippet.name).onChange((value) => {
      if (this.selectedSnippet) {
        this.selectedSnippet.name = value;
      }
    }));
    new import_obsidian2.Setting(form).setName("\u89E6\u53D1\u524D\u7F00").setDesc("\u7528\u4E8E\u89E6\u53D1\u7247\u6BB5\u7684\u524D\u7F00\uFF08\u591A\u4E2A\u524D\u7F00\u7528\u9017\u53F7\u5206\u9694\uFF09").addText((text) => text.setValue(Array.isArray(this.selectedSnippet.prefix) ? this.selectedSnippet.prefix.join(", ") : this.selectedSnippet.prefix).onChange((value) => {
      if (this.selectedSnippet) {
        this.selectedSnippet.prefix = value.split(",").map((p) => p.trim());
      }
    }));
    new import_obsidian2.Setting(form).setName("\u63CF\u8FF0").setDesc("\u7247\u6BB5\u7684\u63CF\u8FF0\u4FE1\u606F").addText((text) => text.setValue(this.selectedSnippet.description || "").onChange((value) => {
      if (this.selectedSnippet) {
        this.selectedSnippet.description = value;
      }
    }));
    new import_obsidian2.Setting(form).setName("\u4F5C\u7528\u57DF").setDesc("\u7247\u6BB5\u9002\u7528\u7684\u8BED\u8A00\u8303\u56F4\uFF08\u591A\u4E2A\u8BED\u8A00\u7528\u9017\u53F7\u5206\u9694\uFF0C\u7559\u7A7A\u8868\u793A\u9002\u7528\u6240\u6709\u8BED\u8A00\uFF09").addText((text) => text.setValue(this.selectedSnippet.scope ? Array.isArray(this.selectedSnippet.scope) ? this.selectedSnippet.scope.join(", ") : this.selectedSnippet.scope : "").onChange((value) => {
      if (this.selectedSnippet) {
        this.selectedSnippet.scope = value ? value.split(",").map((s) => s.trim()) : void 0;
      }
    }));
    const bodyContainer = form.createDiv();
    bodyContainer.createEl("label", { text: "\u7247\u6BB5\u5185\u5BB9", cls: "setting-item-name" });
    bodyContainer.createEl("div", { text: "\u652F\u6301\u5360\u4F4D\u7B26\u683C\u5F0F\uFF1A${1:defaultValue}", cls: "setting-item-description" });
    const bodyTextarea = bodyContainer.createEl("textarea", {
      cls: "snippet-body-textarea"
    });
    bodyTextarea.value = Array.isArray(this.selectedSnippet.body) ? this.selectedSnippet.body.join("\n") : this.selectedSnippet.body;
    bodyTextarea.oninput = () => {
      if (this.selectedSnippet) {
        this.selectedSnippet.body = bodyTextarea.value.split("\n");
      }
    };
    const buttonContainer = form.createDiv({ cls: "button-container" });
    const saveButton = buttonContainer.createEl("button", { text: "\u4FDD\u5B58", cls: "mod-cta" });
    saveButton.onclick = () => this.saveSnippet();
    const deleteButton = buttonContainer.createEl("button", { text: "\u5220\u9664", cls: "mod-warning" });
    deleteButton.onclick = () => this.deleteSnippet();
    const testButton = buttonContainer.createEl("button", { text: "\u6D4B\u8BD5" });
    testButton.onclick = () => this.testSnippet();
  }
  createNewSnippet() {
    const newSnippet = {
      name: "\u65B0\u7247\u6BB5",
      prefix: "new",
      body: ["// \u5728\u8FD9\u91CC\u8F93\u5165\u7247\u6BB5\u5185\u5BB9"],
      description: "\u65B0\u5EFA\u7684\u4EE3\u7801\u7247\u6BB5"
    };
    const id = this.snippetManager.addSnippet(newSnippet);
    this.loadSnippets();
    this.selectedSnippet = this.snippetManager.getSnippet(id) || null;
    this.display();
  }
  saveSnippet() {
    if (!this.selectedSnippet)
      return;
    this.snippetManager.updateSnippet(this.selectedSnippet.id, this.selectedSnippet);
    this.loadSnippets();
    this.display();
  }
  deleteSnippet() {
    if (!this.selectedSnippet)
      return;
    if (confirm(`\u786E\u5B9A\u8981\u5220\u9664\u7247\u6BB5 "${this.selectedSnippet.name}" \u5417\uFF1F`)) {
      this.snippetManager.deleteSnippet(this.selectedSnippet.id);
      this.selectedSnippet = null;
      this.loadSnippets();
      this.display();
    }
  }
  testSnippet() {
    if (!this.selectedSnippet)
      return;
    const body = Array.isArray(this.selectedSnippet.body) ? this.selectedSnippet.body.join("\n") : this.selectedSnippet.body;
    alert(`\u7247\u6BB5\u9884\u89C8\uFF1A

${body}`);
  }
  filterSnippets(query) {
    if (!query) {
      this.snippets = this.snippetManager.getAllSnippets();
    } else {
      this.snippets = this.snippetManager.getAllSnippets().filter(
        (snippet) => snippet.name.toLowerCase().includes(query.toLowerCase()) || (Array.isArray(snippet.prefix) ? snippet.prefix : [snippet.prefix]).some((p) => p.toLowerCase().includes(query.toLowerCase())) || snippet.description && snippet.description.toLowerCase().includes(query.toLowerCase())
      );
    }
    const listContainer = this.contentEl.querySelector(".snippet-list");
    if (listContainer) {
      this.renderSnippetList(listContainer);
    }
  }
  addStyles() {
    if (document.getElementById("snippet-manager-styles"))
      return;
    const style = document.createElement("style");
    style.id = "snippet-manager-styles";
    style.textContent = `
      .snippet-manager-scrollable {
        height: calc(85vh - 105px);
        overflow-y: auto;
        padding: 20px;
        margin: 0 -20px -20px -20px;
      }
      
      .snippet-manager-container {
        display: flex;
        gap: 20px;
        min-height: calc(85vh - 165px);
      }
      
      .snippet-list-panel {
        flex: 0 0 350px;
        border: 1px solid var(--background-modifier-border);
        border-radius: 6px;
        padding: 15px;
        display: flex;
        flex-direction: column;
        max-height: calc(85vh - 185px);
      }
      
      .snippet-edit-panel {
        flex: 1;
        border: 1px solid var(--background-modifier-border);
        border-radius: 6px;
        padding: 15px;
        overflow-y: auto;
        min-width: 400px;
        max-height: calc(85vh - 185px);
      }
      
      .panel-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        border-bottom: 1px solid var(--background-modifier-border);
        padding-bottom: 10px;
        flex-wrap: wrap;
        gap: 10px;
      }
      
      .shortcuts-hint {
        font-size: 0.8em;
        color: var(--text-muted);
        opacity: 0.8;
      }
      
      .shortcuts-text {
        background: var(--background-modifier-border);
        padding: 4px 8px;
        border-radius: 4px;
        font-family: var(--font-monospace);
      }
      
      .search-container {
        margin-bottom: 15px;
      }
      
      .stats-container {
        margin-bottom: 10px;
        padding: 8px 0;
        border-bottom: 1px solid var(--background-modifier-border);
      }
      
      .stats-text {
        font-size: 0.9em;
        color: var(--text-muted);
        font-weight: 500;
      }
      
      .search-input {
        width: 100%;
        padding: 8px;
        border: 1px solid var(--background-modifier-border);
        border-radius: 4px;
      }
      
      .snippet-list {
        flex: 1;
        overflow-y: auto;
        max-height: none;
      }
      
      .snippet-item {
        padding: 12px;
        border: 1px solid var(--background-modifier-border);
        border-radius: 6px;
        margin-bottom: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
        background: var(--background-secondary);
      }
      
      .snippet-item:hover {
        background-color: var(--background-modifier-hover);
        border-color: var(--interactive-accent);
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }
      
      .snippet-item.selected {
        background-color: var(--interactive-accent);
        color: var(--text-on-accent);
        border-color: var(--interactive-accent);
        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.15);
      }
      
      .snippet-title {
        font-weight: bold;
        margin-bottom: 4px;
      }
      
      .snippet-prefix {
        font-family: var(--font-monospace);
        font-size: 0.9em;
        color: var(--text-muted);
        margin-bottom: 4px;
      }
      
      .snippet-description {
        font-size: 0.85em;
        color: var(--text-muted);
      }
      
      .snippet-form {
        space-y: 15px;
      }
      
      .snippet-body-textarea {
        width: 100%;
        height: 300px;
        min-height: 200px;
        font-family: var(--font-monospace);
        font-size: 13px;
        line-height: 1.4;
        padding: 12px;
        border: 1px solid var(--background-modifier-border);
        border-radius: 4px;
        resize: vertical;
        background: var(--background-primary);
      }
      
      .button-container {
        display: flex;
        gap: 10px;
        margin-top: 20px;
      }
      
      .empty-message {
        text-align: center;
        color: var(--text-muted);
        margin-top: 50px;
      }
      
      /* \u54CD\u5E94\u5F0F\u8BBE\u8BA1 */
      @media (max-width: 900px) {
        .snippet-manager-container {
          flex-direction: column;
          min-height: auto;
        }
        
        .snippet-list-panel {
          flex: 0 0 250px;
          max-height: 250px;
        }
        
        .snippet-edit-panel {
          flex: 1;
          min-height: 400px;
          max-height: none;
        }
        
        .snippet-manager-scrollable {
          height: calc(85vh - 85px);
        }
      }
      
      @media (max-height: 700px) {
        .snippet-manager-scrollable {
          height: calc(100vh - 145px);
        }
        
        .snippet-list-panel {
          max-height: calc(100vh - 265px);
        }
        
        .snippet-edit-panel {
          max-height: calc(100vh - 265px);
        }
        
        .snippet-body-textarea {
          height: 200px;
        }
      }
    `;
    document.head.appendChild(style);
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  enabled: true,
  triggerMode: "auto",
  showPreview: true,
  fuzzyMatch: true,
  maxSuggestions: 10,
  customSnippetsPath: "",
  enableStats: true
};
var CodeSnippetsPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.snippetManager = new SnippetManager(this.app, this.settings);
    this.snippetManager.setPlugin(this);
    await this.snippetManager.initialize();
    this.snippetSuggest = new SnippetSuggest(this, this.snippetManager);
    this.registerEditorSuggest(this.snippetSuggest);
    this.addSettingTab(new SettingsTab(this.app, this));
    this.addCommand({
      id: "open-snippet-manager",
      name: "\u6253\u5F00\u4EE3\u7801\u7247\u6BB5\u7BA1\u7406\u5668",
      callback: () => {
        this.openSnippetManager();
      }
    });
    this.addCommand({
      id: "insert-snippet",
      name: "\u63D2\u5165\u4EE3\u7801\u7247\u6BB5",
      editorCallback: (editor) => {
        this.showSnippetSuggestions(editor);
      }
    });
    this.registerDomEvent(document, "keydown", (evt) => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
      if (!activeView)
        return;
      const editor = activeView.editor;
      if ((evt.ctrlKey || evt.metaKey) && evt.code === "Space") {
        if (this.handleManualTrigger(editor, evt)) {
          evt.preventDefault();
        }
      }
      if ((evt.ctrlKey || evt.metaKey) && evt.shiftKey && evt.code === "Space") {
        this.showSnippetSuggestions(editor);
        evt.preventDefault();
      }
      if (this.settings.triggerMode === "tab" && evt.key === "Tab") {
        const cursor = editor.getCursor();
        const line = editor.getLine(cursor.line);
        const beforeCursor = line.substring(0, cursor.ch);
        if (beforeCursor.match(/^\s*[-*+]\s/) || beforeCursor.match(/^\s*\d+\.\s/) || beforeCursor.match(/^\s+/)) {
          return;
        }
        if (this.handleTabTrigger(editor, evt)) {
          evt.preventDefault();
        }
      }
    });
  }
  onunload() {
    if (this.snippetManager) {
      this.snippetManager.saveCustomSnippets().catch(console.error);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    if (this.snippetManager) {
    }
  }
  async resetSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS);
    await this.saveSettings();
  }
  openSnippetManager() {
    new SnippetManagerModal(this.app, this.snippetManager).open();
  }
  async exportSnippets() {
    const snippets = this.snippetManager.getAllSnippets();
    const content = JSON.stringify(snippets, null, 2);
    try {
      const filename = `snippets-export-${new Date().toISOString().split("T")[0]}.json`;
      await this.app.vault.adapter.write(filename, content);
      console.log(`\u7247\u6BB5\u5DF2\u5BFC\u51FA\u5230 ${filename}`);
    } catch (error) {
      console.error("\u5BFC\u51FA\u5931\u8D25:", error);
    }
  }
  importSnippets() {
    const input = document.createElement("input");
    input.type = "file";
    input.accept = ".json";
    input.onchange = async (e) => {
      var _a;
      const file = (_a = e.target.files) == null ? void 0 : _a[0];
      if (!file)
        return;
      try {
        const content = await file.text();
        const snippets = JSON.parse(content);
        if (Array.isArray(snippets)) {
          for (const snippet of snippets) {
            this.snippetManager.addSnippet(snippet);
          }
          console.log(`\u6210\u529F\u5BFC\u5165 ${snippets.length} \u4E2A\u7247\u6BB5`);
        } else {
          console.error("\u65E0\u6548\u7684\u7247\u6BB5\u6587\u4EF6\u683C\u5F0F");
        }
      } catch (error) {
        console.error("\u5BFC\u5165\u5931\u8D25:", error);
      }
    };
    input.click();
  }
  handleTabTrigger(editor, evt) {
    if (!this.settings.enabled)
      return false;
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    const beforeCursor = line.substring(0, cursor.ch);
    const wordMatch = beforeCursor.match(/\S+$/);
    if (!wordMatch)
      return false;
    const word = wordMatch[0];
    const snippets = this.snippetManager.searchSnippets(word);
    if (snippets.length === 0)
      return false;
    if (snippets.length === 1) {
      this.expandSnippet(editor, snippets[0], word);
      return true;
    }
    this.showSnippetSuggestions(editor);
    return false;
  }
  handleManualTrigger(editor, evt) {
    if (!this.settings.enabled)
      return false;
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    const beforeCursor = line.substring(0, cursor.ch);
    const wordMatch = beforeCursor.match(/\S+$/);
    if (!wordMatch)
      return false;
    const word = wordMatch[0];
    const snippets = this.snippetManager.searchSnippets(word);
    if (snippets.length === 0)
      return false;
    this.expandSnippet(editor, snippets[0], word);
    return true;
  }
  expandSnippet(editor, snippet, trigger) {
    const expansion = SnippetExpander.expandSnippet(snippet);
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    const beforeCursor = line.substring(0, cursor.ch);
    const startPos = beforeCursor.lastIndexOf(trigger);
    if (startPos !== -1) {
      const from = { line: cursor.line, ch: startPos };
      const to = { line: cursor.line, ch: cursor.ch };
      editor.replaceRange(expansion.expandedText, from, to);
      if (expansion.cursorPositions.length > 0) {
        const newCursor = {
          line: cursor.line,
          ch: startPos + expansion.cursorPositions[0]
        };
        editor.setCursor(newCursor);
      }
      if (this.settings.enableStats) {
        this.snippetManager.incrementUsage(snippet.id);
      }
    }
  }
  showSnippetSuggestions(editor) {
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    const beforeCursor = line.substring(0, cursor.ch);
    const wordMatch = beforeCursor.match(/\S+$/);
    if (wordMatch) {
      const word = wordMatch[0];
      const snippets = this.snippetManager.searchSnippets(word);
      if (snippets.length > 0) {
        this.expandSnippet(editor, snippets[0], word);
      }
    }
  }
};
var SnippetSuggest = class extends import_obsidian3.EditorSuggest {
  constructor(plugin, snippetManager) {
    super(plugin.app);
    this.plugin = plugin;
    this.snippetManager = snippetManager;
  }
  onTrigger(cursor, editor, file) {
    if (!this.plugin.settings.enabled)
      return null;
    const line = editor.getLine(cursor.line);
    const beforeCursor = line.substring(0, cursor.ch);
    const wordMatch = beforeCursor.match(/(\S+)$/);
    if (!wordMatch)
      return null;
    const word = wordMatch[1];
    if (word.length < 2)
      return null;
    return {
      start: { line: cursor.line, ch: cursor.ch - word.length },
      end: cursor,
      query: word
    };
  }
  getSuggestions(context) {
    const snippets = this.snippetManager.searchSnippets(context.query);
    return snippets.map((snippet) => ({
      id: snippet.id,
      name: snippet.name,
      prefix: Array.isArray(snippet.prefix) ? snippet.prefix[0] : snippet.prefix,
      description: snippet.description,
      body: Array.isArray(snippet.body) ? snippet.body.join("\n") : snippet.body
    }));
  }
  renderSuggestion(suggestion, el) {
    const container = el.createDiv({ cls: "snippet-suggestion" });
    const header = container.createDiv({ cls: "snippet-suggestion-header" });
    header.createSpan({ text: suggestion.name, cls: "snippet-suggestion-name" });
    header.createSpan({ text: suggestion.prefix, cls: "snippet-suggestion-prefix" });
    if (suggestion.description) {
      container.createDiv({ text: suggestion.description, cls: "snippet-suggestion-description" });
    }
    if (this.plugin.settings.showPreview) {
      const preview = container.createDiv({ cls: "snippet-suggestion-preview" });
      const codeEl = preview.createEl("code", { text: suggestion.body.substring(0, 100) });
      if (suggestion.body.length > 100) {
        codeEl.textContent += "...";
      }
    }
  }
  selectSuggestion(suggestion, evt) {
    var _a;
    const snippet = this.snippetManager.getSnippet(suggestion.id);
    if (!snippet)
      return;
    const editor = (_a = this.context) == null ? void 0 : _a.editor;
    if (!editor)
      return;
    const expansion = SnippetExpander.expandSnippet(snippet);
    editor.replaceRange(expansion.expandedText, this.context.start, this.context.end);
    if (expansion.cursorPositions.length > 0) {
      const newCursor = {
        line: this.context.start.line,
        ch: this.context.start.ch + expansion.cursorPositions[0]
      };
      editor.setCursor(newCursor);
    }
    if (this.plugin.settings.enableStats) {
      this.snippetManager.incrementUsage(snippet.id);
    }
  }
};
